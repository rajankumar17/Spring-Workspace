Internationalization in Spring MVC:
--------------------------------------
1.use of spring:message to retrieve the message with the given code. Make sure Spring tag libraries are configured using taglib jsp directive.Spring takes care of loading the appropriate resource bundle messages and make it available for the JSP pages to use.

2.messageSource bean is configured to enable i18n for our application. basename property is used to provide the location of resource bundles. classpath:messages means that resource bundles are located in the classpath and follows name pattern as messages_{locale}.properties. defaultEncoding property is used to define the encoding used for the messages.
<bean id="messageSource" class="com.hcentive.utils.context.support.HCReloadableResourceBundleMessageSource">
	 <property name="basename" value="classpath*:messages"/>
	 <property name="defaultEncoding" value="UTF-8"/>
	 <property name="useCodeAsDefaultMessage" value="true" />
</bean>

OR

<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	<beans:property name="basename" value="classpath:messages" />
	<beans:property name="defaultEncoding" value="UTF-8" />
</beans:bean>
3.Register a “SessionLocaleResolver” or "CookieLocaleResolver" bean, named it exactly the same characters “localeResolver“. It resolves the locales by getting the predefined attribute from user’s session.

localeResolver bean of type org.springframework.web.servlet.i18n.CookieLocaleResolver is used to set a cookie in the client request so that further requests can easily recognize the user locale. For example, we can ask user to select the locale when he launches the web application for the first time and with the use of cookie, we can identify the user locale and automatically send locale specific response. We can also specify the default locale, cookie name and maximum age of the cookie before it gets expired and deleted by the client browser.
<beans:bean id="localeResolver"	class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	<beans:property name="defaultLocale" value="en" />
	<beans:property name="cookieName" value="LOCALE" />
	<beans:property name="cookieMaxAge" value="${cookieMaxAge}" />
</beans:bean>

OR
<beans:bean id="localeResolver"	class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
	<beans:property name="defaultLocale" value="en" />
	<beans:property name="cookieName" value="myAppLocaleCookie"></beans:property>
	<beans:property name="cookieMaxAge" value="3600"></beans:property>
</beans:bean>

Note:If we don’t register any “localeResolver”, AcceptHeaderLocaleResolver will be used by default, which resolves user locale by checking the accept-language header in the client HTTP request.

4.If your application maintains user sessions, then you can also use org.springframework.web.servlet.i18n.SessionLocaleResolver as localeResolver to use a locale attribute in the user’s session. The configuration is similar to CookieLocaleResolver.
<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
    <property name="defaultLocale" value="en" />
</bean>

5.org.springframework.web.servlet.i18n.LocaleChangeInterceptor interceptor is configured to intercept the user request and identify the user locale. The parameter name is configurable and we are using request parameter name for locale as “locale”. Without this interceptor, we won’t be able to change the user locale and send the response based on the new locale settings of the user. It needs to be part of interceptors element otherwise Spring won’t configure it as an interceptor.
<bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
	<property name="paramName" value="lang" />
</bean>

OR
<interceptors>
	<beans:bean	class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
		<beans:property name="paramName" value="locale" />
	</beans:bean>
</interceptors>